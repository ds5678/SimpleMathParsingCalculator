//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Math.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SimpleMathParsingCalculator {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMathListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class MathBaseListener : IMathListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>AdditionExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditionExpression([NotNull] MathParser.AdditionExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditionExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditionExpression([NotNull] MathParser.AdditionExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SineExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSineExpression([NotNull] MathParser.SineExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SineExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSineExpression([NotNull] MathParser.SineExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TangentExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTangentExpression([NotNull] MathParser.TangentExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TangentExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTangentExpression([NotNull] MathParser.TangentExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IntNumber</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntNumber([NotNull] MathParser.IntNumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IntNumber</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntNumber([NotNull] MathParser.IntNumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParensExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParensExpression([NotNull] MathParser.ParensExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParensExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParensExpression([NotNull] MathParser.ParensExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PiExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPiExpression([NotNull] MathParser.PiExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PiExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPiExpression([NotNull] MathParser.PiExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SubtractionExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubtractionExpression([NotNull] MathParser.SubtractionExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SubtractionExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubtractionExpression([NotNull] MathParser.SubtractionExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ExponentialExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExponentialExpression([NotNull] MathParser.ExponentialExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ExponentialExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExponentialExpression([NotNull] MathParser.ExponentialExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FloatNumber</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloatNumber([NotNull] MathParser.FloatNumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FloatNumber</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloatNumber([NotNull] MathParser.FloatNumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DivisionExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDivisionExpression([NotNull] MathParser.DivisionExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DivisionExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDivisionExpression([NotNull] MathParser.DivisionExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicationExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicationExpression([NotNull] MathParser.MultiplicationExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicationExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicationExpression([NotNull] MathParser.MultiplicationExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NegationExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegationExpression([NotNull] MathParser.NegationExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NegationExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegationExpression([NotNull] MathParser.NegationExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CosineExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCosineExpression([NotNull] MathParser.CosineExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CosineExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCosineExpression([NotNull] MathParser.CosineExpressionContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace MathParsingTest
