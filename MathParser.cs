//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Math.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SimpleMathParsingCalculator {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class MathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, PositiveInt=13, PositiveFloat=14, WS=15;
	public const int
		RULE_exp = 0;
	public static readonly string[] ruleNames = {
		"exp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'^'", "'-'", "'*'", "'/'", "'+'", "'sin'", "'cos'", 
		"'tan'", "'pi'", "'Pi'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "PositiveInt", "PositiveFloat", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Math.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AdditionExpressionContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public AdditionExpressionContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SineExpressionContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public SineExpressionContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterSineExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitSineExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSineExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TangentExpressionContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public TangentExpressionContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterTangentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitTangentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTangentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntNumberContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PositiveInt() { return GetToken(MathParser.PositiveInt, 0); }
		public IntNumberContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterIntNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitIntNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensExpressionContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ParensExpressionContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterParensExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitParensExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParensExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PiExpressionContext : ExpContext {
		public PiExpressionContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterPiExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitPiExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPiExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionExpressionContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public SubtractionExpressionContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterSubtractionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitSubtractionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentialExpressionContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExponentialExpressionContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterExponentialExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitExponentialExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentialExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatNumberContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PositiveFloat() { return GetToken(MathParser.PositiveFloat, 0); }
		public FloatNumberContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterFloatNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitFloatNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionExpressionContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public DivisionExpressionContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterDivisionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitDivisionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivisionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public MultiplicationExpressionContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegationExpressionContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public NegationExpressionContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterNegationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitNegationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CosineExpressionContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public CosineExpressionContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.EnterCosineExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMathListener typedListener = listener as IMathListener;
			if (typedListener != null) typedListener.ExitCosineExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMathVisitor<TResult> typedVisitor = visitor as IMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCosineExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PositiveInt:
				{
				_localctx = new IntNumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 3;
				Match(PositiveInt);
				}
				break;
			case PositiveFloat:
				{
				_localctx = new FloatNumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 4;
				Match(PositiveFloat);
				}
				break;
			case T__0:
				{
				_localctx = new ParensExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 5;
				Match(T__0);
				State = 6;
				exp(0);
				State = 7;
				Match(T__1);
				}
				break;
			case T__3:
				{
				_localctx = new NegationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 9;
				Match(T__3);
				State = 10;
				exp(10);
				}
				break;
			case T__7:
				{
				_localctx = new SineExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 11;
				Match(T__7);
				State = 12;
				Match(T__0);
				State = 13;
				exp(0);
				State = 14;
				Match(T__1);
				}
				break;
			case T__8:
				{
				_localctx = new CosineExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 16;
				Match(T__8);
				State = 17;
				Match(T__0);
				State = 18;
				exp(0);
				State = 19;
				Match(T__1);
				}
				break;
			case T__9:
				{
				_localctx = new TangentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 21;
				Match(T__9);
				State = 22;
				Match(T__0);
				State = 23;
				exp(0);
				State = 24;
				Match(T__1);
				}
				break;
			case T__10:
				{
				_localctx = new PiExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26;
				Match(T__10);
				}
				break;
			case T__11:
				{
				_localctx = new PiExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 27;
				Match(T__11);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 47;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 45;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new ExponentialExpressionContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 30;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 31;
						Match(T__2);
						State = 32;
						exp(12);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicationExpressionContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 33;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 34;
						Match(T__4);
						State = 35;
						exp(10);
						}
						break;
					case 3:
						{
						_localctx = new DivisionExpressionContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 36;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 37;
						Match(T__5);
						State = 38;
						exp(9);
						}
						break;
					case 4:
						{
						_localctx = new AdditionExpressionContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 39;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 40;
						Match(T__6);
						State = 41;
						exp(8);
						}
						break;
					case 5:
						{
						_localctx = new SubtractionExpressionContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 42;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 43;
						Match(T__3);
						State = 44;
						exp(7);
						}
						break;
					}
					} 
				}
				State = 49;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,15,51,2,0,7,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,29,8,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,46,8,0,10,0,12,
		0,49,9,0,1,0,0,1,0,1,0,0,0,62,0,28,1,0,0,0,2,3,6,0,-1,0,3,29,5,13,0,0,
		4,29,5,14,0,0,5,6,5,1,0,0,6,7,3,0,0,0,7,8,5,2,0,0,8,29,1,0,0,0,9,10,5,
		4,0,0,10,29,3,0,0,10,11,12,5,8,0,0,12,13,5,1,0,0,13,14,3,0,0,0,14,15,5,
		2,0,0,15,29,1,0,0,0,16,17,5,9,0,0,17,18,5,1,0,0,18,19,3,0,0,0,19,20,5,
		2,0,0,20,29,1,0,0,0,21,22,5,10,0,0,22,23,5,1,0,0,23,24,3,0,0,0,24,25,5,
		2,0,0,25,29,1,0,0,0,26,29,5,11,0,0,27,29,5,12,0,0,28,2,1,0,0,0,28,4,1,
		0,0,0,28,5,1,0,0,0,28,9,1,0,0,0,28,11,1,0,0,0,28,16,1,0,0,0,28,21,1,0,
		0,0,28,26,1,0,0,0,28,27,1,0,0,0,29,47,1,0,0,0,30,31,10,11,0,0,31,32,5,
		3,0,0,32,46,3,0,0,12,33,34,10,9,0,0,34,35,5,5,0,0,35,46,3,0,0,10,36,37,
		10,8,0,0,37,38,5,6,0,0,38,46,3,0,0,9,39,40,10,7,0,0,40,41,5,7,0,0,41,46,
		3,0,0,8,42,43,10,6,0,0,43,44,5,4,0,0,44,46,3,0,0,7,45,30,1,0,0,0,45,33,
		1,0,0,0,45,36,1,0,0,0,45,39,1,0,0,0,45,42,1,0,0,0,46,49,1,0,0,0,47,45,
		1,0,0,0,47,48,1,0,0,0,48,1,1,0,0,0,49,47,1,0,0,0,3,28,45,47
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MathParsingTest
