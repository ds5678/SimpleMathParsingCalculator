//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Math.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SimpleMathParsingCalculator {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="MathParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public interface IMathVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>AdditionExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditionExpression([NotNull] MathParser.AdditionExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>SineExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSineExpression([NotNull] MathParser.SineExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TangentExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTangentExpression([NotNull] MathParser.TangentExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IntNumber</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIntNumber([NotNull] MathParser.IntNumberContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParensExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParensExpression([NotNull] MathParser.ParensExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>PiExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPiExpression([NotNull] MathParser.PiExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>SubtractionExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubtractionExpression([NotNull] MathParser.SubtractionExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ExponentialExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExponentialExpression([NotNull] MathParser.ExponentialExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FloatNumber</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFloatNumber([NotNull] MathParser.FloatNumberContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>DivisionExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDivisionExpression([NotNull] MathParser.DivisionExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MultiplicationExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicationExpression([NotNull] MathParser.MultiplicationExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NegationExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNegationExpression([NotNull] MathParser.NegationExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CosineExpression</c>
	/// labeled alternative in <see cref="MathParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCosineExpression([NotNull] MathParser.CosineExpressionContext context);
}
} // namespace MathParsingTest
